plugins {
    id 'checkstyle'
    id 'de.thetaphi.forbiddenapis' version '3.7'
    id 'java'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'jacoco'
}

Properties props = new Properties()
props.load(new FileInputStream(file("gradle/version.properties")));
ext.set("versions", props)

// Please reflect the version change in ``README.rst`` to point to what will be
// the newly released version.
project.version = "1.2.0"

allprojects {
    group = 'io.crate'
    repositories {
        mavenCentral()
    }

    sourceCompatibility = "11"
    targetCompatibility = "11"
}

dependencies {
    // Needed to output all metrics using the prometheus text format
    implementation "io.prometheus:simpleclient_common:${versions.prometheus_lib}"
    // Let's use default JMX metric exporter from prometheus lib
    implementation "io.prometheus:simpleclient_hotspot:${versions.prometheus_lib}"

    testImplementation "io.crate:crate-testing:${versions.crate_testing}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
    testImplementation ("com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedtesting}") {
        exclude group: 'junit', module: 'junit'
    }
}

jacoco {
    toolVersion = "0.8.8"
}


tasks.withType(Javadoc) {
    failOnError = false
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            // enable assertions for junit tests
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: '-ea')
            }
        }
    }

    project {
        vcs = 'Git'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parse(file("idea/codeStyle.xml")))
                node.append(new XmlParser().parse(file("idea/codeInspection.xml")))
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find {
                    it.option.find { it.@name == "myName" }?.@value == "CrateASL2"
                }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("idea/copyright.xml")))
                }
            }
        }
    }
}

checkstyle {
    toolVersion = "10.5.0"
    def checkstyle_dir = new String("$rootDir/gradle/checkstyle/")
    configProperties = [
            'checkstyleDir' : checkstyle_dir,
            // May be overwritten by other modules, e.g. enterprise
            'licenseHeaderFile' : 'header.txt'
    ]
    configFile = file(checkstyle_dir + "rules.xml")
    checkstyleTest.enabled = false
}

forbiddenApisMain {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("$rootDir/gradle/forbidden-signatures.txt")
    suppressAnnotations = ['**.SuppressForbidden']
    ignoreFailures = false
}

forbiddenApisTest {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("$rootDir/gradle/forbidden-signatures.txt")
    suppressAnnotations = ['**.SuppressForbidden']
    ignoreFailures = true
}

wrapper {
    gradleVersion = '7.6'
}

jar {
    classifier ''
    duplicatesStrategy 'fail'
    archiveBaseName = 'crate-jmx-exporter'
    manifest {
        attributes(
            "Implementation-Title": "Crate.IO JMX HTTP Exporter Agent",
            "Implementation-Version": project.version,
            "Premain-Class": 'io.crate.jmx.Agent',
            "Agent-Class": 'io.crate.jmx.Agent'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test.dependsOn(dependsOn: [jar])   // JAR is needed by integration tests

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.hasProperty('sonatypeTokenUsername') ? sonatypeTokenUsername : ""
            password = project.hasProperty('sonatypeTokenPassword') ? sonatypeTokenPassword : ""
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.crate'
            artifactId = 'crate-jmx-exporter'
            from components.java

            pom {
                name = 'crate-jmx-exporter'
                description = 'Crate.IO Java Agent to expose JMX metrics via HTTP'
                url = 'https://github.com/crate/jmx_exporter'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'crate'
                        name = 'Crate Developers'
                        email = 'office@crate.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/crate/jmx_exporter.git'
                    developerConnection = 'scm:git:ssh:git@github.com:crate/jmx_exporter.git'
                    url = 'http://example.com/my-library/'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
                password = project.hasProperty('sonatypePassword') ? sonatypePassword : ""
            }
        }
    }
}

signing {
    useGpgCmd()
    sign(publishing.publications)
}
