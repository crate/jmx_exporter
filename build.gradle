buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.thetaphi:forbiddenapis:2.5'
    }
}

plugins {
    id "com.github.spotbugs" version "1.6.2"
    id "com.github.johnrengelman.shadow" version "2.0.2"
}

Properties props = new Properties()
props.load(new FileInputStream(file("gradle/version.properties")));
ext.set("versions", props)

project.version = "0.6.0"

allprojects {
    group = 'io.crate'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'de.thetaphi.forbiddenapis'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = "8"
    targetCompatibility = "8"
}

dependencies {
    // Needed to output all metrics using the prometheus text format
    compile "io.prometheus:simpleclient_common:${versions.prometheus_lib}"
    // Let's use default JMX metric exporter from prometheus lib
    compile "io.prometheus:simpleclient_hotspot:${versions.prometheus_lib}"

    testCompile "io.crate:crate-testing:${versions.crate_testing}"
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    testCompile ("com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedtesting}") {
        exclude group: 'junit', module: 'junit'
    }
    // gradle does not include tools.jar by default
    testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
}



jacoco {
    toolVersion = "0.8.0"
}

spotbugs {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Javadoc) {
    failOnError = false
}


compileJava {
    options.warnings = true
    options.deprecation = true

    finalizedBy checkstyleMain, forbiddenApisMain, spotbugsMain
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

def jvmTestFlags = ['-ea']

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            // enable assertions for junit tests
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: jvmTestFlags.join(' '))
            }
        }
    }

    project {
        vcs = 'Git'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parse(file("idea/codeStyle.xml")))
                node.append(new XmlParser().parse(file("idea/codeInspection.xml")))
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find {
                    it.option.find { it.@name == "myName" }?.@value == "CrateASL2"
                }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("idea/copyright.xml")))
                }
            }
        }
    }
}

checkstyle {
    toolVersion = "8.1"
    def checkstyle_dir = new String("$rootDir/gradle/checkstyle/")
    configProperties = [
            'checkstyleDir' : checkstyle_dir,
            // May be overwritten by other modules, e.g. enterprise
            'licenseHeaderFile' : 'header.txt'
    ]
    configFile = file(checkstyle_dir + "rules.xml")
    checkstyleTest.enabled = false
}

forbiddenApisMain {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("$rootDir/gradle/forbidden-signatures.txt")
    suppressAnnotations = ['**.SuppressForbidden']
    ignoreFailures = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

shadowJar {
    classifier ''
    duplicatesStrategy 'fail'
    configurations = [project.configurations.compile]

    dependencies {
        exclude(dependency {
            it.moduleGroup == 'org.apache'
        })
    }
    manifest {
        attributes(
            "Implementation-Title": "Crate.IO JMX HTTP Exporter Agent",
            "Implementation-Version": project.version,
            "Premain-Class": 'io.crate.jmx.Agent',
            "Agent-Class": 'io.crate.jmx.Agent'
            )
    }

    relocate 'io.prometheus', 'io.crate.jmx.shade.io.prometheus'
}

jar.dependsOn(dependsOn: [shadowJar])
jar {
    actions = [] // Do nothing, build shadedJar instead
}

task buildJar(type: Jar, dependsOn: [classes]) {
    doLast {
        tasks.shadowJar.execute()
    }
}
tasks.buildJar.mustRunAfter jar // otherwise jar task would override shadowJar artifact

test.dependsOn(dependsOn: [buildJar])   // JAR is needed by integration tests


task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate.IO JMX HTTP Exporter Agent")
    }
}

task buildJavadocJar (dependsOn: [myJavadocs] ) << {
    tasks.javadocJar.execute()
}

task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes("Implementation-Title": "Crate.IO JMX HTTP Exporter Agent")
    }
}

task buildSourceJar () << {
    tasks.sourceJar.execute()
}


artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

task signJars (type : Sign, dependsOn: [jar, buildJavadocJar, buildSourceJar]) {
    sign configurations.archives
}


project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""
project.ext.url = 'https://crate.io'
project.ext.scm = {
    url 'https://github.com/crate/jmx_exporter'
    connection 'scm:git:git://github.com/crate/jmx_exporter.git'
    developerConnection 'scm:git:ssh:git@github.com:crate/jmx_exporter.git'
}
project.ext.licenses = {
    license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/license/LICENSE-2.0.txt'
        distribution 'repo'
    }
}
project.ext.developers = {
    developer {
        id 'crate'
        name 'Crate Developers'
        email 'office@crate.io'
    }
}

uploadArchives.dependsOn([signJars])
uploadArchives {
    repositories{
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                    if (project.ext.bintrayUsername.length() == 0 || project.ext.bintrayPassword.length() == 0) {
                        throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                    }
            }

            pom.project {
                artifactId 'crate-jmx-exporter'
                name 'crate-jmx-exporter'
                description 'Crate.IO Java Agent to expose JMX metrics via HTTP'
                url project.ext.url
                scm project.ext.scm
                licenses project.ext.licenses
                developers project.ext.developers
            }

            pom = addFilter('crate-jmx-exporter') {artifact, file ->
                artifact.name == 'crate-jmx-exporter'
            }

            repository(id: 'crate-jmx-exporter', url: 'https://api.bintray.com/maven/crate/crate/crate-jmx-exporter') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}
